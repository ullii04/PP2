-- 1. –ö–µ—Å—Ç–µ–Ω—ñ “õ“±—Ä—É
CREATE TABLE IF NOT EXISTS phonebook1 (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(255),
    phone_number VARCHAR(255)
);

-- 2. –¢–µ—Å—Ç—Ç—ñ–∫ –¥–µ—Ä–µ–∫—Ç–µ—Ä
INSERT INTO phonebook1 (username, phone_number)
VALUES
  ('Tomiris', '123456789'),
  ('John Doe', '987654321'),
  ('Alice Smith', '5556667787');

-- 3. –Ü–∑–¥–µ—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã: –∞—Ç—ã –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ –±–æ–π—ã–Ω—à–∞
CREATE OR REPLACE FUNCTION search_records(pattern TEXT)
RETURNS TABLE(user_id INT, username VARCHAR, phone_number VARCHAR) AS $$
BEGIN
    RETURN QUERY
    SELECT p.user_id, p.username, p.phone_number
    FROM phonebook1 p
    WHERE p.username ILIKE '%' || pattern || '%'
       OR p.phone_number LIKE '%' || pattern || '%';
END;
$$ LANGUAGE plpgsql;

-- 4. –ñ–∞“£–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã “õ–æ—Å—É –Ω–µ–º–µ—Å–µ –∂–∞“£–∞—Ä—Ç—É (–±–∞—Ä –±–æ–ª—Å–∞)
CREATE OR REPLACE PROCEDURE insert_or_update_user(p_name VARCHAR, p_phone VARCHAR)
LANGUAGE plpgsql
AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM phonebook1 WHERE username = p_name) THEN
        UPDATE phonebook1
        SET phone_number = p_phone
        WHERE username = p_name;
    ELSE
        INSERT INTO phonebook1 (username, phone_number)
        VALUES (p_name, p_phone);
    END IF;
END;
$$;

-- 5. –ë—ñ—Ä–Ω–µ—à–µ “õ–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã “õ–æ—Å—É (—Ç—ñ–∑—ñ–º –∞—Ä“õ—ã–ª—ã), —Ç–µ–ª–µ—Ñ–æ–Ω –¥“±—Ä—ã—Å—Ç—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
CREATE OR REPLACE PROCEDURE insert_multiple_users(user_list TEXT[])
LANGUAGE plpgsql
AS $$
DECLARE
    entry TEXT;
    name TEXT;
    phone TEXT;
    incorrect_data TEXT[] := ARRAY[]::TEXT[];
BEGIN
    FOREACH entry IN ARRAY user_list
    LOOP
        name := split_part(entry, ',', 1);
        phone := split_part(entry, ',', 2);

        -- –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ–Ω —Ç–µ–∫—Å–µ—Ä—É
        IF phone ~ '^\+?[0-9]{10,15}$' THEN
            CALL insert_or_update_user(name, phone);
        ELSE
            incorrect_data := array_append(incorrect_data, entry);
        END IF;
    END LOOP;

    -- “ö–∞—Ç–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–∞–π–ª—ã —Ö–∞–±–∞—Ä–ª–∞—É
    IF array_length(incorrect_data, 1) > 0 THEN
        RAISE NOTICE '“ö–∞—Ç–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä: %', incorrect_data;
    END IF;
END;
$$;

-- 6. –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥—ã limit –∂”ô–Ω–µ offset –∞—Ä“õ—ã–ª—ã –∫”©—Ä—É (pagination)
CREATE OR REPLACE FUNCTION get_users_paginated(limit_count INT, offset_count INT)
RETURNS TABLE(user_id INT, username TEXT, phone_number TEXT)
LANGUAGE SQL
AS $$
    SELECT p.user_id, p.username, p.phone_number
    FROM phonebook1 p
    ORDER BY p.user_id
    LIMIT limit_count OFFSET offset_count;
$$;

-- 7. –ê—Ç—ã –Ω–µ–º–µ—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∞—Ä“õ—ã–ª—ã “õ–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã –∂–æ—é
CREATE OR REPLACE PROCEDURE delete_user_by_name_or_phone(input TEXT)
LANGUAGE plpgsql
AS $$
BEGIN
    IF input ~ '^\D+$' THEN
        DELETE FROM phonebook1
        WHERE username = input;
    ELSIF input ~ '^\+?[0-9]{10,15}$' THEN
        DELETE FROM phonebook1
        WHERE phone_number = input;
    ELSE
        RAISE NOTICE '“ö–∞—Ç–µ –µ–Ω–≥—ñ–∑—ñ–ª–≥–µ–Ω –¥–µ—Ä–µ–∫!';
    END IF;
END;
$$;

-- üîπ –¢–µ—Å—Ç—Ç–µ—Ä:
-- –Ü–∑–¥–µ—É:
SELECT * FROM search_records('Tom');

-- “ö–æ—Å—É –Ω–µ–º–µ—Å–µ –∂–∞“£–∞—Ä—Ç—É:
CALL insert_or_update_user('Naruto Uzumaki', '87001234567');

-- –ë—ñ—Ä–Ω–µ—à–µ “õ–æ–ª–¥–∞–Ω—É—à—ã:
CALL insert_multiple_users(ARRAY['Sasuke Uchiha,87001112233', 'Sakura Haruno,invalidphone']);

-- –ü–∞–≥–∏–Ω–∞—Ü–∏—è:
SELECT * FROM get_users_paginated(2, 0);

-- –ñ–æ—é:
CALL delete_user_by_name_or_phone('Naruto Uzumaki');
